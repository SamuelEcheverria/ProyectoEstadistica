suppressPackageStartupMessages({
library(tidyverse)  
library(readODS)
library(stringi)
library(lubridate)
})

# ==== Cargar datos ====
veh_maq_2023 <- readr::read_csv("apm_unid_veh_maq_tiapm_2023.csv")
veh_maq_2024 <- readr::read_csv("apm_unid_veh_maq_tiapm_2024.csv")
veh_maq_2025 <- readr::read_csv("apm_unid_veh_maq_tiapm_isem_2025.csv")

# ==== Helpers ====
pick_col <- function(df, candidates) {
  nm <- intersect(candidates, names(df))
  if (length(nm) == 0) {
    stop(paste0("No se encontró ninguna de estas columnas: ",
                paste(candidates, collapse=", ")))
  }
  nm[1]
}

normalize_txt <- function(x) {
  # sin stringi: quita tildes (aprox) y pasa a MAYÚSCULAS
  toupper(iconv(as.character(x), to = "ASCII//TRANSLIT"))
}

prep_df <- function(df) {
  col_fecha  <- pick_col(df, c("Fecha Arribo","Fecha de Arribo","Fecha_Arribo","FECHA ARRIBO","ARRIVAL DATE"))
  col_subgrp <- pick_col(df, c("Tipo de Carga (Subgrupos)","Subgrupo","SUBGRUPO","TIPO DE CARGA (SUBGRUPOS)"))
  col_unid   <- pick_col(df, c("Total Unidades","TOTAL UNIDADES","Total_Unidades","total_unidades","Unidades","UNIDADES"))
  
  df %>%
    mutate(
      fecha    = as.Date(.data[[col_fecha]]),
      anio     = lubridate::year(fecha),
      mes      = lubridate::month(fecha),
      subgrupo = .data[[col_subgrp]],
      unidades = as.numeric(.data[[col_unid]])
    ) %>%
    filter(!is.na(fecha))
}

# =========================
# 1) PRUEBA T: 2023 (pre) vs 2024 (post) para VEHÍCULOS
# =========================

d23 <- prep_df(veh_maq_2023)
d24 <- prep_df(veh_maq_2024)

datos_t <- bind_rows(
  d23 %>% mutate(periodo = "pre"),
  d24 %>% mutate(periodo = "post")
) %>%
  mutate(subgrupo_norm = normalize_txt(subgrupo)) %>%
  filter(grepl("^VEHIC", subgrupo_norm))

veh_mensual <- datos_t %>%
  group_by(periodo, anio, mes) %>%
  summarise(vehiculos_mes = sum(unidades, na.rm = TRUE), .groups = "drop") %>%
  arrange(periodo, anio, mes)

pre_vect  <- veh_mensual %>% filter(periodo == "pre")  %>% arrange(anio, mes) %>% pull(vehiculos_mes)
post_vect <- veh_mensual %>% filter(periodo == "post") %>% arrange(anio, mes) %>% pull(vehiculos_mes)

media_pre  <- mean(pre_vect,  na.rm = TRUE)
media_post <- mean(post_vect, na.rm = TRUE)
sd_pre     <- sd(pre_vect,    na.rm = TRUE)
sd_post    <- sd(post_vect,   na.rm = TRUE)

tt <- t.test(post_vect, pre_vect, alternative = "greater")  # Welch por defecto

dif_abs <- media_post - media_pre
dif_rel <- (media_post / media_pre - 1) * 100

resumen_t <- data.frame(
  media_mensual_pre       = media_pre,
  sd_mensual_pre          = sd_pre,
  n_meses_pre             = length(pre_vect),
  media_mensual_post      = media_post,
  sd_mensual_post         = sd_post,
  n_meses_post            = length(post_vect),
  diferencia_absoluta     = dif_abs,
  diferencia_porcentual   = dif_rel,
  estadistico_t           = as.numeric(tt$statistic),
  gl_approx               = unname(tt$parameter),
  p_value                 = tt$p.value,
  conf_int_low            = tt$conf.int[1],
  conf_int_high           = tt$conf.int[2],
  alternativa             = "post > pre (una cola, Welch)"
)
print(resumen_t)

if (tt$p.value < 0.05) {
  cat("\nConclusión t: p < 0.05 → Se RECHAZA H0 (post > pre).\n")
} else {
  cat("\nConclusión t: p ≥ 0.05 → NO se rechaza H0 (no evidencia de aumento post).\n")
}

# Gráfico serie con medias
df_plot <- veh_mensual %>% mutate(fecha_mes = as.Date(sprintf("%d-%02d-01", anio, mes)))
medias <- df_plot %>% group_by(periodo) %>% summarise(media = mean(vehiculos_mes, na.rm = TRUE), .groups = "drop")
p_txt <- ifelse(tt$p.value < 0.001, "p < 0.001", paste0("p = ", format(tt$p.value, digits = 3)))

p1 <- ggplot(df_plot, aes(x = fecha_mes, y = vehiculos_mes, color = periodo, group = periodo)) +
  geom_line(linewidth = 1) +
  geom_point(size = 2) +
  geom_hline(data = medias, aes(yintercept = media, color = periodo), linetype = "dashed") +
  labs(
    title = "Vehículos movilizados por mes: 2023 (pre) vs 2024 (post)",
    subtitle = paste0("Dif. medias (post - pre): ", round(dif_abs,1), " (", round(dif_rel,1), "%).  ", p_txt),
    x = "Mes", y = "Vehículos / mes", color = "Periodo"
  ) +
  theme_minimal(base_size = 12) +
  theme(legend.position = "top")
print(p1)

# =========================
# 2) ANOVA: estacionalidad en MAQUINARIAS (2023–2025)
# =========================

d23 <- prep_df(veh_maq_2023)
d24 <- prep_df(veh_maq_2024)
d25 <- prep_df(veh_maq_2025)

datos_a <- bind_rows(d23, d24, d25) %>%
  mutate(subgrupo_norm = normalize_txt(subgrupo)) %>%
  filter(grepl("^MAQUIN|^MACHIN", subgrupo_norm))

maq_mensual <- datos_a %>%
  group_by(anio, mes) %>%
  summarise(maquinarias_mes = sum(unidades, na.rm = TRUE), .groups = "drop") %>%
  mutate(
    trimestre = case_when(
      mes %in% 1:3 ~ "T1",
      mes %in% 4:6 ~ "T2",
      mes %in% 7:9 ~ "T3",
      TRUE         ~ "T4"
    ),
    trimestre = factor(trimestre, levels = c("T1","T2","T3","T4"))
  )

anova_mod <- aov(maquinarias_mes ~ trimestre, data = maq_mensual)
print(summary(anova_mod))

tabla_medias <- maq_mensual %>%
  group_by(trimestre) %>%
  summarise(
    n     = n(),
    media = mean(maquinarias_mes),
    sd    = sd(maquinarias_mes)
  )
print(tabla_medias)

anv <- anova(anova_mod)
ss_total <- sum(anv[,"Sum Sq"])
ss_trimestre <- anv["trimestre","Sum Sq"]
eta2 <- ss_trimestre / ss_total
cat("Eta^2 (tamaño de efecto):", round(eta2, 3), "\n")

if (summary(anova_mod)[[1]][["Pr(>F)"]][1] < 0.05) {
  print(TukeyHSD(anova_mod, "trimestre"))
}

p_box <- ggplot(maq_mensual, aes(x = trimestre, y = maquinarias_mes)) +
  geom_boxplot() +
  labs(title = "Maquinarias movilizadas por trimestre (2023–2025)",
       x = "Trimestre", y = "Maquinarias / mes") +
  theme_minimal()
print(p_box)

# =========================
# 3) REGRESIÓN LINEAL: volumen total ~ tiempo + registros_mes 
# =========================

d23 <- prep_df(veh_maq_2023)
d24 <- prep_df(veh_maq_2024)
d25 <- prep_df(veh_maq_2025)
datos_r <- bind_rows(d23, d24, d25) %>%
  mutate(subg_norm = normalize_txt(subgrupo),
         tipo = case_when(
           grepl("^VEHIC",  subg_norm) ~ "vehiculos",
           grepl("^MAQUIN|^MACHIN", subg_norm) ~ "maquinarias",
           TRUE ~ "otros"
         ))

vol_mensual <- datos_r %>%
  group_by(anio, mes, tipo) %>%
  summarise(unidades = sum(unidades, na.rm=TRUE), .groups="drop") %>%
  tidyr::pivot_wider(names_from = tipo, values_from = unidades, values_fill = 0) %>%
  mutate(volumen_total = vehiculos + maquinarias)

registros_mensual <- datos_r %>%
  group_by(anio, mes) %>%
  summarise(registros_mes = n(), .groups="drop")

base_modelo <- vol_mensual %>%
  left_join(registros_mensual, by=c("anio","mes")) %>%
  arrange(anio, mes) %>%
  mutate(tiempo = dplyr::row_number())

modelo <- lm(volumen_total ~ tiempo + registros_mes, data = base_modelo)
print(summary(modelo))

p_trend <- ggplot(base_modelo, aes(x = tiempo, y = volumen_total)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, color="red") +
  labs(title="Tendencia del volumen total de carga",
       x="Tiempo (meses consecutivos)", y="Volumen total (vehículos + maquinarias)") +
  theme_minimal()
print(p_trend)

p_regs <- ggplot(base_modelo, aes(x = registros_mes, y = volumen_total)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, color="blue") +
  labs(title="Relación entre registros mensuales (proxy de buques) y volumen total",
       x="Registros por mes", y="Volumen total") +
  theme_minimal()
print(p_regs)

# =========================
# 4) CHI-CUADRADO: Tipo de carga vs Trimestre (usando unidades)
# =========================

base_chi <- bind_rows(d23, d24, d25) %>%
  mutate(
    subg_norm = normalize_txt(subgrupo),
    tipo = case_when(
      grepl("^VEHIC",  subg_norm) ~ "Vehículos",
      grepl("^MAQUIN|^MACHIN", subg_norm) ~ "Maquinarias",
      TRUE ~ NA_character_
    ),
    trimestre = case_when(
      mes %in% 1:3 ~ "T1",
      mes %in% 4:6 ~ "T2",
      mes %in% 7:9 ~ "T3",
      TRUE         ~ "T4"
    )
  ) %>%
  filter(!is.na(tipo), !is.na(trimestre))

tabla_cont <- base_chi %>%
  group_by(tipo, trimestre) %>%
  summarise(freq = sum(unidades, na.rm = TRUE), .groups = "drop") %>%
  tidyr::pivot_wider(names_from = trimestre, values_from = freq, values_fill = 0)

mat <- as.matrix(tabla_cont[, -1, drop = FALSE])
rownames(mat) <- tabla_cont$tipo

chi <- chisq.test(mat, correct = FALSE)
print(chi)

prop_col <- sweep(mat, 2, colSums(mat), FUN = "/")
prop_row <- sweep(mat, 1, rowSums(mat), FUN = "/")

k <- nrow(mat); r <- ncol(mat)
cramers_v <- sqrt(as.numeric(chi$statistic) / (sum(mat) * (min(k, r) - 1)))
cat("Cramer's V:", round(cramers_v, 3), "\n")

contrib <- chi$stdres^2

cat("\n--- Tabla de contingencia (frecuencias) ---\n"); print(mat)
cat("\n--- Esperados ---\n"); print(round(chi$expected, 2))
cat("\n--- Residuos estandarizados ---\n"); print(round(chi$stdres, 2))
cat("\nValor-p:", chi$p.value, "\nEstadístico X^2:", chi$statistic, 
    "\nGl:", chi$parameter, "\nCramer's V:", round(cramers_v, 3), "\n")

mosaicplot(mat, shade = TRUE, main = "Tipo de carga vs Trimestre")
